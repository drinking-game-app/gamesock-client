diff --git a/node_modules/timesync/lib/request/request.js b/node_modules/timesync/lib/request/request.js
index d4e3a8c..fa29332 100644
--- a/node_modules/timesync/lib/request/request.js
+++ b/node_modules/timesync/lib/request/request.js
@@ -1,6 +1,7 @@
 'use strict';
 
-var isBrowser = typeof window !== 'undefined';
+var isBrowser = typeof window !== 'undefined' || navigator.product == 'ReactNative';
+console.log('You are officialy patched - Congrats ðŸ˜Ž')
 
 // FIXME: how to do conditional loading this with ES6 modules?
-module.exports = isBrowser ? require('./request.browser') : require('./request.node');
\ No newline at end of file
+module.exports = require('./request.browser');
\ No newline at end of file
diff --git a/node_modules/timesync/lib/request/request.node.js b/node_modules/timesync/lib/request/request.node.js
deleted file mode 100644
index 517f2d4..0000000
--- a/node_modules/timesync/lib/request/request.node.js
+++ /dev/null
@@ -1,76 +0,0 @@
-'use strict';
-
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.post = post;
-
-var _http = require('http');
-
-var _http2 = _interopRequireDefault(_http);
-
-var _https = require('https');
-
-var _https2 = _interopRequireDefault(_https);
-
-var _url = require('url');
-
-var _url2 = _interopRequireDefault(_url);
-
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-
-var parseUrl = _url2.default.parse;
-
-function post(url, body, timeout) {
-  return new Promise(function (resolve, reject) {
-    var data = body === 'string' ? body : JSON.stringify(body);
-    var urlObj = parseUrl(url);
-
-    // An object of options to indicate where to post to
-    var options = {
-      host: urlObj.hostname,
-      port: urlObj.port,
-      path: urlObj.path,
-      method: 'POST',
-      headers: { 'Content-Length': data.length }
-    };
-
-    if (body !== 'string') {
-      options.headers['Content-Type'] = 'application/json';
-    }
-
-    var proto = urlObj.protocol === 'https:' ? _https2.default : _http2.default;
-
-    var req = proto.request(options, function (res) {
-      res.setEncoding('utf8');
-      var result = '';
-      res.on('data', function (data) {
-        result += data;
-      });
-
-      res.on('end', function () {
-        var contentType = res.headers['content-type'];
-        var isJSON = contentType && contentType.indexOf('json') !== -1;
-
-        try {
-          var body = isJSON ? JSON.parse(result) : result;
-
-          resolve([body, res.statusCode]);
-        } catch (err) {
-          reject(err);
-        }
-      });
-    });
-
-    req.on('error', reject);
-
-    req.on('socket', function (socket) {
-      socket.setTimeout(timeout, function () {
-        req.abort();
-      });
-    });
-
-    req.write(data);
-    req.end();
-  });
-}
\ No newline at end of file
